Архитектурное описание LC-3

размер регистров - 16 бит. Кол-во регистров - 10 (R0-R7, R_PC, R_COND и R_COUNT). Все регистры (R0-R7) - регистры общего назначения, но в некоторых случаях, например при трансляции кода на C в ассемблерные инструкции для архитектуры LC-3 некоторые регистры используются для определённых целей. R_PC (счётчик команд), R_COND (регистр флагов условий, сообщает информацию о предыдущих расчётах. LC-3 имеет только 3 флага условий которые указывают на знак предыдущего расчета)

размер памяти - 16 бит (2^16 - кол-во ячеек памяти).

В 16 битной инструкции последние 4 бита отводится под код операции, а остальные под параметры. Из 16 возможный кодов инструкций определены 15, хотя некоторые инструкции имеют более одного режима работы. Выполнение каждой инструкции регулируется конечным автоматом (в реальном компьютере это делает ПЗУ и microsequencer (генерирует адреса, используемые для пошагового выполнения микропрограммы (используется как часть countrol unit находящегося в CPU или как отдельное устройство генерации адресов)))

Описания кодов инструкций (кодировка всех инструкций представлены в pdf файле):

Значения в памяти должны быть перенесены в регистр перед тем как с ними можно будет работать.

Арифметические операции:

1. ADD (adition). Установка флагов.
2. AND (bit-wise logical AND). Установка флагов.
3. NOT (). Установка флагов.
Для первых двух операций, в качестве опереандов для этих операций могут быть 2 регистра или непосредственное значение как операнд). Этих операций досточно для реализации множества других арифметических операций, включая вычитание (с помощью NOT) и операции левого сдвига (используя инструкцию сложения для умножения на 2). LC-3 также может реализовать любую побитовую логическую функцию, с помощью NOT и AND.

Обращения к памяти могут выполняться путем вычисления адресов на основе текущего значения программного счетчика (PC) или регистра в файле регистров; кроме того, LC-3 обеспечивает косвенную загрузку и сохранение, которые используют фрагмент данных в памяти в качестве адреса для загрузки данных или сохранения данных в нем.

LC-3 предоставляет условные и безусловные переходы. Условные переходы основаны на арифметическом знаке (отрицательном, нулевом или положительном) последнего фрагмента данных, записанного в файл регистров. Безусловные переходы могут перемещать выполнение в местоположение, заданное значением регистра или смещением относительно ПК. Три инструкции (JSR, JSRR и TRAP) поддерживают концепцию вызовов подпрограммы, сохраняя адрес кода, вызывающего подпрограмму, в регистре перед изменением значения программного счетчика. LC-3 не поддерживает прямое арифметическое сравнение двух значений.

Для вычисления разности двух значений регистра требуется найти отрицательную эквивалентность одного значения регистра, а затем добавить отрицательное число к положительному значению во втором регистре. Разность двух регистров будет сохранена в одном из 8 регистров, доступных пользователю.

Описание инструкций:

BR (conditional branch) - если установлен один из флагов, то переходим по адресу. 
JMP (jmp and return from subroutine) - переход по адресу или возврат из функции (RET).
JSR (jump to subroutine) - сохраняет в регитр R7 адрес следующей инструкции, затем в PC загружается адрес первой инструкции подпрограммы.
LD (load) - загружает значение из памяти в регистр. Установка флагов.
LDI (load indirect) - загружает значение из указателя хранящегося в памяти. Установка флагов.
ST (store) - загружает значение из регистра в память.
STI (store indirect) - загружает значение из регистра по указателю который хранится в памяти.
LEA (load effictive address) - загружает адрес ячейки памяти в регистр. Установка флагов.
LDR (load base + offset) - косвенная адреация (к адресу добавляется значение из регистра (BaseR) и происходит обращение к памяти и сохранению значения в регистр (DR)). Установка флагов
STR (store base + offset) - содержимое регистра (SR) сохраняется по адресу (offset6 + BaseR)
TRAP (system call) - системный вызов. В R7 сохраняется адрес следующей инструкции, затем в PC загружает адрес первой инструкции системной функции. (системные функции расположены )

Описание программы:

Исполняемый файл(ы) на языке для архитектуры LC3 передаётся через аргументы командной строки в программу. После запуска она проверяет наличие аргументов командной строки, а также, что она запущена из термина, для того чтобы отключить канонический режим и echo (я так понимаю, что этого можно было не делать, это нужно только для самих запускаемых программ, но так как у нас нету возможности (API) для настройки терминила, то в самой арихитектуре это уже предустановлено). Далее происходит инициализация памяти, регисторов и загрузка файла в память.

В программе реализованы memory mapped registers (регистры отображенные в память) - это зарезервированные адреса в памяти которые программа может считать для получения информации о том, была ли нажата клавиша и если была, то другой адрес в памяти сообщает о том, какая именно клавиша была нажата. (похоже на то, как происходит взаимодействие с жесткий диском, порты которого это ячейки общей памяти). API функция getc блокирует выполнение программы до тех пор, пока не будет нажать клавиша, KBST и KBDR позволяет программе опрашивать состояние устройства и продолжать выполнение, так что программа может оставаться отзывчивой во время ожидания ввода. Причём эти ячейки недоступны напрямую и требуют вызова функций getter и setter.

При выполнении программы все регистры инициализируются нулями.
